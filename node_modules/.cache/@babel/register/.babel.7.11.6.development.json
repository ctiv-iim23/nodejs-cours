{
  "{\"sourceRoot\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\",\"filename\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\\\\md-seed-config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\ma2pl\\Documents\\nodejs-cours",
      "filename": "D:\\ma2pl\\Documents\\nodejs-cours\\md-seed-config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\ma2pl\\Documents\\nodejs-cours",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\ma2pl\\Documents\\nodejs-cours\\md-seed-config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\ma2pl\\Documents\\nodejs-cours\\md-seed-config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\",
        "sourceFileName": "md-seed-config.js"
      }
    },
    "ast": null,
    "code": "const mongoose = require(\"mongoose\");\n\nconst PostSeeder = require(\"./src/db/seed/posts.seeder\");\n\nconst mongoURL = \"mongodb://localhost/dbname\";\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\n\nconst seedersList = {\n  PostSeeder\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\n\nconst connect = async () => await mongoose.connect(mongoURL, {\n  useNewUrlParser: true\n});\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\n\n\nconst dropdb = async () => mongoose.connection.db.dropDatabase();\n\nmodule.exports = {\n  seedersList,\n  connect,\n  dropdb\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1kLXNlZWQtY29uZmlnLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlBvc3RTZWVkZXIiLCJtb25nb1VSTCIsInNlZWRlcnNMaXN0IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsImRyb3BkYiIsImNvbm5lY3Rpb24iLCJkYiIsImRyb3BEYXRhYmFzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsNEJBQUQsQ0FBMUI7O0FBRUEsTUFBTUUsUUFBUSxHQUFHLDRCQUFqQjtBQUVBOzs7Ozs7QUFNQSxNQUFNQyxXQUFXLEdBQUc7QUFDbEJGLEVBQUFBO0FBRGtCLENBQXBCO0FBR0E7Ozs7O0FBSUEsTUFBTUcsT0FBTyxHQUFHLFlBQ2QsTUFBTUwsUUFBUSxDQUFDSyxPQUFULENBQWlCRixRQUFqQixFQUEyQjtBQUFFRyxFQUFBQSxlQUFlLEVBQUU7QUFBbkIsQ0FBM0IsQ0FEUjtBQUVBOzs7Ozs7QUFJQSxNQUFNQyxNQUFNLEdBQUcsWUFBWVAsUUFBUSxDQUFDUSxVQUFULENBQW9CQyxFQUFwQixDQUF1QkMsWUFBdkIsRUFBM0I7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmUixFQUFBQSxXQURlO0FBRWZDLEVBQUFBLE9BRmU7QUFHZkUsRUFBQUE7QUFIZSxDQUFqQiIsInNvdXJjZVJvb3QiOiJEOlxcbWEycGxcXERvY3VtZW50c1xcbm9kZWpzLWNvdXJzXFwiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcbmNvbnN0IFBvc3RTZWVkZXIgPSByZXF1aXJlKFwiLi9zcmMvZGIvc2VlZC9wb3N0cy5zZWVkZXJcIik7XG5cbmNvbnN0IG1vbmdvVVJMID0gXCJtb25nb2RiOi8vbG9jYWxob3N0L2RibmFtZVwiO1xuXG4vKipcbiAqIFNlZWRlcnMgTGlzdFxuICogb3JkZXIgaXMgaW1wb3J0YW50XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmNvbnN0IHNlZWRlcnNMaXN0ID0ge1xuICBQb3N0U2VlZGVyLFxufTtcbi8qKlxuICogQ29ubmVjdCB0byBtb25nb2RiIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5jb25zdCBjb25uZWN0ID0gYXN5bmMgKCkgPT5cbiAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdChtb25nb1VSTCwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUgfSk7XG4vKipcbiAqIERyb3AvQ2xlYXIgdGhlIGRhdGFiYXNlIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5jb25zdCBkcm9wZGIgPSBhc3luYyAoKSA9PiBtb25nb29zZS5jb25uZWN0aW9uLmRiLmRyb3BEYXRhYmFzZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2VlZGVyc0xpc3QsXG4gIGNvbm5lY3QsXG4gIGRyb3BkYixcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "md-seed-config.js"
      ],
      "names": [
        "mongoose",
        "require",
        "PostSeeder",
        "mongoURL",
        "seedersList",
        "connect",
        "useNewUrlParser",
        "dropdb",
        "connection",
        "db",
        "dropDatabase",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,4BAAD,CAA1B;;AAEA,MAAME,QAAQ,GAAG,4BAAjB;AAEA;;;;;;AAMA,MAAMC,WAAW,GAAG;AAClBF,EAAAA;AADkB,CAApB;AAGA;;;;;AAIA,MAAMG,OAAO,GAAG,YACd,MAAML,QAAQ,CAACK,OAAT,CAAiBF,QAAjB,EAA2B;AAAEG,EAAAA,eAAe,EAAE;AAAnB,CAA3B,CADR;AAEA;;;;;;AAIA,MAAMC,MAAM,GAAG,YAAYP,QAAQ,CAACQ,UAAT,CAAoBC,EAApB,CAAuBC,YAAvB,EAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,WADe;AAEfC,EAAAA,OAFe;AAGfE,EAAAA;AAHe,CAAjB",
      "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\",
      "sourcesContent": [
        "const mongoose = require(\"mongoose\");\nconst PostSeeder = require(\"./src/db/seed/posts.seeder\");\n\nconst mongoURL = \"mongodb://localhost/dbname\";\n\n/**\n * Seeders List\n * order is important\n * @type {Object}\n */\n\nconst seedersList = {\n  PostSeeder,\n};\n/**\n * Connect to mongodb implementation\n * @return {Promise}\n */\nconst connect = async () =>\n  await mongoose.connect(mongoURL, { useNewUrlParser: true });\n/**\n * Drop/Clear the database implementation\n * @return {Promise}\n */\nconst dropdb = async () => mongoose.connection.db.dropDatabase();\n\nmodule.exports = {\n  seedersList,\n  connect,\n  dropdb,\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1601398137244
  },
  "{\"sourceRoot\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\\\\src\\\\db\\\\seed\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\",\"filename\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\\\\src\\\\db\\\\seed\\\\posts.seeder.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\ma2pl\\\\Documents\\\\nodejs-cours\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\ma2pl\\Documents\\nodejs-cours",
      "filename": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\posts.seeder.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\ma2pl\\Documents\\nodejs-cours",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\posts.seeder.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\posts.seeder.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\",
        "sourceFileName": "posts.seeder.js"
      }
    },
    "ast": null,
    "code": "const {\n  Seeder\n} = require(\"mongoose-data-seed\");\n\nconst Post = require(\"../models/postModel\");\n\nconst faker = require(\"faker\");\n\nconst data = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    title: faker.lorem.words(3),\n    description: faker.lorem.sentence(),\n    image: faker.image.imageUrl(),\n    body: faker.lorem.paragraphs(10, \"\\n\")\n  });\n}\n\nclass PostsSeeder extends Seeder {\n  async shouldRun() {\n    return Model.countDocuments().exec().then(count => count === 0);\n  }\n\n  async run() {\n    return Model.create(data);\n  }\n\n}\n\nmodule.exports = PostsSeeder;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RzLnNlZWRlci5qcyJdLCJuYW1lcyI6WyJTZWVkZXIiLCJyZXF1aXJlIiwiUG9zdCIsImZha2VyIiwiZGF0YSIsImkiLCJwdXNoIiwidGl0bGUiLCJsb3JlbSIsIndvcmRzIiwiZGVzY3JpcHRpb24iLCJzZW50ZW5jZSIsImltYWdlIiwiaW1hZ2VVcmwiLCJib2R5IiwicGFyYWdyYXBocyIsIlBvc3RzU2VlZGVyIiwic2hvdWxkUnVuIiwiTW9kZWwiLCJjb3VudERvY3VtZW50cyIsImV4ZWMiLCJ0aGVuIiwiY291bnQiLCJydW4iLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBYUMsT0FBTyxDQUFDLG9CQUFELENBQTFCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLHFCQUFELENBQXBCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUcsSUFBSSxHQUFHLEVBQWI7O0FBRUEsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzNCRCxFQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVTtBQUNSQyxJQUFBQSxLQUFLLEVBQUVKLEtBQUssQ0FBQ0ssS0FBTixDQUFZQyxLQUFaLENBQWtCLENBQWxCLENBREM7QUFFUkMsSUFBQUEsV0FBVyxFQUFFUCxLQUFLLENBQUNLLEtBQU4sQ0FBWUcsUUFBWixFQUZMO0FBR1JDLElBQUFBLEtBQUssRUFBRVQsS0FBSyxDQUFDUyxLQUFOLENBQVlDLFFBQVosRUFIQztBQUlSQyxJQUFBQSxJQUFJLEVBQUVYLEtBQUssQ0FBQ0ssS0FBTixDQUFZTyxVQUFaLENBQXVCLEVBQXZCLEVBQTJCLElBQTNCO0FBSkUsR0FBVjtBQU1EOztBQUVELE1BQU1DLFdBQU4sU0FBMEJoQixNQUExQixDQUFpQztBQUMvQixRQUFNaUIsU0FBTixHQUFrQjtBQUNoQixXQUFPQyxLQUFLLENBQUNDLGNBQU4sR0FDSkMsSUFESSxHQUVKQyxJQUZJLENBRUVDLEtBQUQsSUFBV0EsS0FBSyxLQUFLLENBRnRCLENBQVA7QUFHRDs7QUFFRCxRQUFNQyxHQUFOLEdBQVk7QUFDVixXQUFPTCxLQUFLLENBQUNNLE1BQU4sQ0FBYXBCLElBQWIsQ0FBUDtBQUNEOztBQVQ4Qjs7QUFZakNxQixNQUFNLENBQUNDLE9BQVAsR0FBaUJWLFdBQWpCIiwic291cmNlUm9vdCI6IkQ6XFxtYTJwbFxcRG9jdW1lbnRzXFxub2RlanMtY291cnNcXHNyY1xcZGJcXHNlZWRcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgU2VlZGVyIH0gPSByZXF1aXJlKFwibW9uZ29vc2UtZGF0YS1zZWVkXCIpO1xuY29uc3QgUG9zdCA9IHJlcXVpcmUoXCIuLi9tb2RlbHMvcG9zdE1vZGVsXCIpO1xuY29uc3QgZmFrZXIgPSByZXF1aXJlKFwiZmFrZXJcIik7XG5cbmNvbnN0IGRhdGEgPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gIGRhdGEucHVzaCh7XG4gICAgdGl0bGU6IGZha2VyLmxvcmVtLndvcmRzKDMpLFxuICAgIGRlc2NyaXB0aW9uOiBmYWtlci5sb3JlbS5zZW50ZW5jZSgpLFxuICAgIGltYWdlOiBmYWtlci5pbWFnZS5pbWFnZVVybCgpLFxuICAgIGJvZHk6IGZha2VyLmxvcmVtLnBhcmFncmFwaHMoMTAsIFwiXFxuXCIpLFxuICB9KTtcbn1cblxuY2xhc3MgUG9zdHNTZWVkZXIgZXh0ZW5kcyBTZWVkZXIge1xuICBhc3luYyBzaG91bGRSdW4oKSB7XG4gICAgcmV0dXJuIE1vZGVsLmNvdW50RG9jdW1lbnRzKClcbiAgICAgIC5leGVjKClcbiAgICAgIC50aGVuKChjb3VudCkgPT4gY291bnQgPT09IDApO1xuICB9XG5cbiAgYXN5bmMgcnVuKCkge1xuICAgIHJldHVybiBNb2RlbC5jcmVhdGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb3N0c1NlZWRlcjtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "posts.seeder.js"
      ],
      "names": [
        "Seeder",
        "require",
        "Post",
        "faker",
        "data",
        "i",
        "push",
        "title",
        "lorem",
        "words",
        "description",
        "sentence",
        "image",
        "imageUrl",
        "body",
        "paragraphs",
        "PostsSeeder",
        "shouldRun",
        "Model",
        "countDocuments",
        "exec",
        "then",
        "count",
        "run",
        "create",
        "module",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,IAAI,GAAG,EAAb;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,IAAAA,KAAK,EAAEJ,KAAK,CAACK,KAAN,CAAYC,KAAZ,CAAkB,CAAlB,CADC;AAERC,IAAAA,WAAW,EAAEP,KAAK,CAACK,KAAN,CAAYG,QAAZ,EAFL;AAGRC,IAAAA,KAAK,EAAET,KAAK,CAACS,KAAN,CAAYC,QAAZ,EAHC;AAIRC,IAAAA,IAAI,EAAEX,KAAK,CAACK,KAAN,CAAYO,UAAZ,CAAuB,EAAvB,EAA2B,IAA3B;AAJE,GAAV;AAMD;;AAED,MAAMC,WAAN,SAA0BhB,MAA1B,CAAiC;AAC/B,QAAMiB,SAAN,GAAkB;AAChB,WAAOC,KAAK,CAACC,cAAN,GACJC,IADI,GAEJC,IAFI,CAEEC,KAAD,IAAWA,KAAK,KAAK,CAFtB,CAAP;AAGD;;AAED,QAAMC,GAAN,GAAY;AACV,WAAOL,KAAK,CAACM,MAAN,CAAapB,IAAb,CAAP;AACD;;AAT8B;;AAYjCqB,MAAM,CAACC,OAAP,GAAiBV,WAAjB",
      "sourceRoot": "D:\\ma2pl\\Documents\\nodejs-cours\\src\\db\\seed\\",
      "sourcesContent": [
        "const { Seeder } = require(\"mongoose-data-seed\");\nconst Post = require(\"../models/postModel\");\nconst faker = require(\"faker\");\n\nconst data = [];\n\nfor (let i = 0; i < 10; i++) {\n  data.push({\n    title: faker.lorem.words(3),\n    description: faker.lorem.sentence(),\n    image: faker.image.imageUrl(),\n    body: faker.lorem.paragraphs(10, \"\\n\"),\n  });\n}\n\nclass PostsSeeder extends Seeder {\n  async shouldRun() {\n    return Model.countDocuments()\n      .exec()\n      .then((count) => count === 0);\n  }\n\n  async run() {\n    return Model.create(data);\n  }\n}\n\nmodule.exports = PostsSeeder;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1601398243408
  }
}